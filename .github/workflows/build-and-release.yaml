on: 
  workflow_dispatch:
  schedule:
    - cron: 25 5 * * 1

name: build-and-release

jobs:
  download_and_prepare_osm:
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1

      - name: Get Geofabrik ETag
        id: geofabrik_etag
        run : |
          echo "::set-output name=etag::$(curl -I "https://download.geofabrik.de/europe/great-britain-latest.osm.pbf" | grep "ETag")"

      - name: Cache OSM
        id: cache_osm
        uses: actions/cache@v2
        with:
          path: |
            output/*osm*
          key: ${{ steps.geofabrik_etag.outputs.etag }}-${{ hashFiles('R/*osm*', 'R/*bound*') }}

      - name: Query dependencies
        if: steps.cache_osm.outputs.cache-hit != 'true'
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        if: steps.cache_osm.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        if: steps.cache_osm.outputs.cache-hit != 'true'
        run: |
          install.packages(c("devtools"))
          devtools::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Install osmium
        if: steps.cache_osm.outputs.cache-hit != 'true'
        run: brew install osmium-tool
            
      - name: Download and prepare OSM
        if: steps.cache_osm.outputs.cache-hit != 'true'
        run: |
          devtools::load_all()
          options(timeout=240)
          download_and_prepare_osm()
        shell: Rscript {0}

      - name: Upload OSM artifact
        uses: actions/upload-artifact@v2
        with:
          name: wales_ish.osm.pbf
          path: output/wales_ish.osm.pbf*
          if-no-files-found: error

  download_and_prepare_atoc_gtfs:
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ATOC_USERNAME: ${{ secrets.ATOC_USERNAME }}
      ATOC_PASSWORD: ${{ secrets.ATOC_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          install.packages(c("devtools"))
          devtools::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Write config.yml
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ github.workspace }}/config.yml
          contents: |
            default:
              atoc_username: !expr Sys.getenv("ATOC_USERNAME")
              atoc_password: !expr Sys.getenv("ATOC_PASSWORD")

      - name: Get ATOC URL
        id: atoc_url
        run: |
          devtools::load_all()
          cat(paste0("::set-output name=url::", get_atoc_download_url(),"\n"))
        shell: Rscript {0}

      - name: Cache ATOC
        id: cache_atoc
        uses: actions/cache@v2
        with:
          path: |
            output/*atoc*gtfs*
          key: ${{ steps.atoc_url.outputs.url }}-${{ hashFiles('R/*atoc*', 'R/*bound*', 'R/gtfs*') }}

      - name: Download and prepare ATOC GTFS
        if: steps.cache_atoc.outputs.cache-hit != 'true'
        run: |
          devtools::load_all()
          download_atoc()
          prepare_atoc_gtfs()
        shell: Rscript {0}

      - name: Upload ATOC GTFS artifact
        uses: actions/upload-artifact@v2
        with:
          name: atoc.walesish.gtfs.zip
          path: output/atoc.walesish.gtfs.zip*
          if-no-files-found: error

  download_and_prepare_bus_gtfs:
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      TNDS_USERNAME: ${{ secrets.TNDS_USERNAME }}
      TNDS_PASSWORD: ${{ secrets.TNDS_PASSWORD }}
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          install.packages(c("devtools"))
          devtools::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Write config.yml
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ github.workspace }}/config.yml
          contents: |
            default:
              tnds_username: !expr Sys.getenv("TNDS_USERNAME")
              tnds_password: !expr Sys.getenv("TNDS_PASSWORD")
            
      - name: Download and prepare TNDS GTFS
        run: |
          devtools::load_all()
          download_tnds()
          prepare_tnds_gtfs()
        shell: Rscript {0}

      - name: Upload Wales TNDS GTFS artifact
        uses: actions/upload-artifact@v2
        with:
          name: wales.bus.walesish.gtfs.zip
          path: output/wales.bus.walesish.gtfs.zip*
          if-no-files-found: error

      - name: Upload NCSD TNDS GTFS artifact
        uses: actions/upload-artifact@v2
        with:
          name: ncsd.bus.walesish.gtfs.zip
          path: output/ncsd.bus.walesish.gtfs.zip*
          if-no-files-found: error

      - name: Download and prepare BODS GTFS
        run: |
          devtools::load_all()
          download_and_prepare_bus_gtfs()
        shell: Rscript {0}

      - name: Upload BODS GTFS WM artifact
        uses: actions/upload-artifact@v2
        with:
          name: west_midlands.bus.walesish.gtfs.zip
          path: output/west_midlands.bus.walesish.gtfs.zip*
          if-no-files-found: error

      - name: Upload BODS GTFS NW artifact
        uses: actions/upload-artifact@v2
        with:
          name: north_west.bus.walesish.gtfs.zip
          path: output/north_west.bus.walesish.gtfs.zip*
          if-no-files-found: error

      - name: Upload BODS GTFS SW artifact
        uses: actions/upload-artifact@v2
        with:
          name: south_west.bus.walesish.gtfs.zip
          path: output/south_west.bus.walesish.gtfs.zip*
          if-no-files-found: error


  prepare_otp_graphs:
    needs: ['download_and_prepare_osm', 'download_and_prepare_atoc_gtfs', 'download_and_prepare_bus_gtfs']
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install dependencies
        run: |
          install.packages(c("devtools"))
          devtools::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Download OSM artifact
        uses: actions/download-artifact@v2
        with:
          name: wales_ish.osm.pbf
          path: output

      - name: Download ATOC GTFS artifact
        uses: actions/download-artifact@v2
        with:
          name: atoc.walesish.gtfs.zip
          path: output

      - name: Download Wales Bus GTFS artifact
        uses: actions/download-artifact@v2
        with:
          name: wales.bus.walesish.gtfs.zip
          path: output

      - name: Download NCSD Bus GTFS artifact
        uses: actions/download-artifact@v2
        with:
          name: ncsd.bus.walesish.gtfs.zip
          path: output

      - name: Download NW Bus GTFS artifact
        uses: actions/download-artifact@v2
        with:
          name: north_west.bus.walesish.gtfs.zip
          path: output

      - name: Download SW Bus GTFS artifact
        uses: actions/download-artifact@v2
        with:
          name: south_west.bus.walesish.gtfs.zip
          path: output

      - name: Download WM Bus GTFS artifact
        uses: actions/download-artifact@v2
        with:
          name: west_midlands.bus.walesish.gtfs.zip
          path: output

      - name: Display structure of output dir
        run: ls -R
        working-directory: output

      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Prepare street graph
        run: |
          devtools::load_all()
          download_otp()
          prepare_street_graph()
        shell: Rscript {0}

      - name: Upload street graph artifact
        uses: actions/upload-artifact@v2
        with:
          name: streetGraph.obj
          path: output/streetGraph.obj
          if-no-files-found: error

      - name: Prepare transport graph
        run: |
          devtools::load_all()
          prepare_transport_graph()
        shell: Rscript {0}

      - name: Upload transport graph artifact
        uses: actions/upload-artifact@v2
        with:
          name: graph.obj
          path: output/graph.obj
          if-no-files-found: error

      - name: Prepare map, test journeys, and readme
        run: |
          devtools::load_all()
          prepare_pretty_wales_ish_map()
          prepare_test_journeys()
          prepare_readme()
        shell: Rscript {0}

      - name: Upload test journeys artifact
        uses: actions/upload-artifact@v2
        with:
          name: test_journeys.obj
          path: output/test_journeys.csv
          if-no-files-found: error

      - name: Upload map artifact
        uses: actions/upload-artifact@v2
        with:
          name: map.png
          path: output/map.png*
          if-no-files-found: error

      - name: Checkout graph-releases branch
        uses: actions/checkout@v2
        with:
          ref: graph-releases
          path: graph-releases

      - name: Copy READMEs and Commit
        run: |
          cd graph-releases
          rm -rf file_metadata
          mkdir file_metadata
          cp ../output/*.meta.json file_metadata/
          cp ../output/map.png map.png
          cp ../output/test_journeys.csv test_journeys.csv
          cp ../output/output_readme.html index.html
          cp ../output/output_readme.md README.md
          git config user.name "Graph Release Bot"
          git config user.email "<>"
          git add .
          git commit -m "Updated for new release"
          git push origin graph-releases
          cd ..

      - name: Get timestamp for release
        id: timestamp
        env:
          TZ: Europe/London
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%dT%H-%M-%S')"

      - name: Release new graph
        uses: ncipollo/release-action@v1
        with:
          artifacts: "data-raw/otp.jar,output/graph.obj"
          bodyFile: "output/output_readme.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: graph-releases
          tag: ${{ steps.timestamp.outputs.timestamp }}


